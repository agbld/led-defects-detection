"""
This script reads the results.csv files generated by UltraLytics and plots the metrics over epochs for each model.

Example usage:
* `python analyze_results.py`
* `python analyze_results.py --results_dir ./runs/archive`
"""

import pandas as pd
import matplotlib.pyplot as plt
import os
from matplotlib.backends.backend_pdf import PdfPages
import argparse

# Define the arguments
parser = argparse.ArgumentParser(description='Analyze YOLO model results')
parser.add_argument('--results_dir', type=str, default='./runs/detect', help='Path to the directory containing results.csv files')
parser.add_argument('--output_file', type=str, default='runs_report.pdf', help='Path to the output PDF file')
args = parser.parse_args()

# Define your result files (update the paths to your actual results.csv files)
result_files = {}
for root, dirs, files in os.walk(args.results_dir):
    for file in files:
        if file == 'results.csv':
            model_name = os.path.basename(root)
            result_files[model_name] = os.path.join(root, file)

# Load the data into pandas DataFrames
data_frames = {}
for model_name, file_path in result_files.items():
    if os.path.exists(file_path):
        df = pd.read_csv(file_path)
        data_frames[model_name] = df
    else:
        print(f"File not found for {model_name}: {file_path}")

# Define the metrics to plot
metrics_to_plot = [
    '   metrics/precision(B)', 
    '      metrics/recall(B)',
    '       metrics/mAP50(B)', 
    '    metrics/mAP50-95(B)', 
]

# Open a PDF document to save all the plots and table
with PdfPages(args.output_file) as pdf:
    
    # Plot metrics over epochs for each model
    for metric in metrics_to_plot:
        plt.figure(figsize=(10, 6))
        for model_name, df in data_frames.items():
            plt.plot(df['                  epoch'], df[metric], label=model_name)
        plt.title(f"{metric.strip()} over Epochs")
        plt.xlabel('Epoch')
        plt.ylabel(metric.strip())
        plt.legend()
        plt.grid(True)
        
        # Save the figure to the PDF
        pdf.savefig()
        plt.close()

    # Generate summary table of best performances
    summary_data = []
    for model_name, df in data_frames.items():
        # Calculate the mean of all metrics for each epoch
        df['mean_metric'] = df[metrics_to_plot].mean(axis=1)

        # Choose the epoch with the highest mean metric
        best_epoch = df['mean_metric'].idxmax()
        best_metrics = df.loc[best_epoch, ['   metrics/precision(B)', '      metrics/recall(B)', '       metrics/mAP50(B)', '    metrics/mAP50-95(B)', 'mean_metric']]
        summary_data.append({
            'Model': model_name,
            'Best Epoch': int(df.loc[best_epoch, '                  epoch']),
            'mAP50': best_metrics['   metrics/precision(B)'],
            'mAP50-95': best_metrics['      metrics/recall(B)'],
            'Precision': best_metrics['       metrics/mAP50(B)'],
            'Recall': best_metrics['    metrics/mAP50-95(B)'],
            'Mean Metric': round(best_metrics['mean_metric'], 5)
        })

    # Convert the summary data to a pandas DataFrame
    summary_df = pd.DataFrame(summary_data)

    # Plot training and validation losses
    loss_metrics = ['         train/box_loss', '         train/cls_loss', '         train/dfl_loss']
    for metric in loss_metrics:
        plt.figure(figsize=(10, 6))
        for model_name, df in data_frames.items():
            # handle nan in df[metric]
            df[metric] = df[metric].fillna(0)
            plt.plot(df['                  epoch'], df[metric], label=model_name)
        plt.title(f"{metric.strip()} over Epochs")
        plt.xlabel('Epoch')
        plt.ylabel(metric.strip())
        plt.legend()
        plt.grid(True)
        
        # Save the figure to the PDF
        pdf.savefig()
        plt.close()

    # Create a table figure for summary data
    fig, ax = plt.subplots(figsize=(8, 4))  # Set figure size as per your requirement
    ax.axis('off')  # No axes for the table figure

    # Create a table within the figure
    table = ax.table(cellText=summary_df.values, colLabels=summary_df.columns, cellLoc='center', loc='center')
    table.scale(1, 2)  # Scale table size

    # Adjust the font size
    table.auto_set_font_size(False)
    table.set_fontsize(8)  # Set the font size as per your requirement

    # Save the table figure to the PDF
    pdf.savefig(fig)
    plt.close()